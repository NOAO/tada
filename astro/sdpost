#!/bin/bash
#
# This CUPS backend allows you to "print to file". 
# Modified from:
#   http://osdir.com/ml/printing.cups.devel/2004-10/msg00007.html
# which contained snip (c) Kurt Pfeifle, Danka Deutschland GmbH
# See also: https://community.kde.org/Printing/Developer_Tools
#
# Install a printer like this:
#   chmod a+x <this.file>
#   sudo cp <this.file> /usr/lib/cups/backend/sdpost
#   sudo service cups restart
#   sudo lpadmin -p astrorepo -v sdpost:/tmp/mountaincache -E
# There are restrictions on what directory can be written to
#
# If you print to the "astrorepo" printer, you will find the files from
# CUPS filtering produced in "/tmp/astro/*".
#
#
# Destination Directory structure:
#    /mtncache/
#      fits/<USER>/<JOBID>/<datafile>
#      other/<USER>/<JOBID>/<MIME-TYPE>/<MIME-SUBTYPE>/<datafile>
#
# Rejected moving files directly into old iDCI structure because would require
# reading FITS header and wouldn't apply to other kinds of
# files. Instead, we will allow all files to be moved to Valley and
# straighten it up there. 
#
# The old iDCI structure was:
#  /mtncache/
#      fits/<DATE>/<TELESCOPE>/<PROPID>/<datafile>
# Example absolute path for above structure:
#   /mtncache/20140921/kp4m/2014B-0461/k4k_140921_235746_zri.fits.fz
#


export LOG=/tmp/sdpost.log #!!!
JOBID=$1 ;
USER=$2 ;
TITLE=$3 ;
COPIES=$4 ;
OPTIONS=$5 ;
FILE=$6 || FILE="-"; # test for 5 or 6 parameters

PID=$$ ;
echo "~~~~~~~~~~~~~~~~~~~~~" >> ${LOG}
echo "JOBID   = " ${JOBID}   >> ${LOG}
echo "USER    = " ${USER}    >> ${LOG}
echo "TITLE   = " ${TITLE}   >> ${LOG}
echo "COPIES  = " ${COPIES}  >> ${LOG} 
echo "OPTIONS = " ${OPTIONS} >> ${LOG} 
echo "FILE    = " ${FILE}    >> ${LOG} 
echo "CONTENT_TYPE = " ${CONTENT_TYPE} >> ${LOG} 
echo "DEVICE_URI   = "  ${DEVICE_URI} >> ${LOG}
rootDir="${DEVICE_URI#sdpost:}"
echo "rootDir  = " ${rootDir}         >> ${LOG}
echo "TMPDIR   = " ${TMPDIR}          >> ${LOG}
#! echo "FILETYPE = " `file $FILE`        >> ${LOG}

# if there are no arguments: print the "I'm here" message for cupsd's probing
if [ $# -eq 0 ]; then
echo "direct sdpost \"Unknown\" \"Print any job to file specified in 
device-URI\""
exit 0
fi

# in case of wrong number of arguments: print usage hint
if [ $# -ne 5 -a $# -ne 6 ]; then
echo ""
echo "Usage: sdpost job-id user title copies options [file]"
echo " example for device-URI: 'sdpost:/path/to/targetfile'"
echo "(this writes the printfile to disk at specified path)"
echo ""
echo "Install a printqueue with:\n \
'lpadmin -p <sdpostr-printer-name> -v sdpost:/</path/to/targetfile> -E'"
echo ""
exit 1
fi

# sanitize $TITLE -- remove any spaces, colons and slashes or
# backslashes from filename
TITLE=`echo ${TITLE} | tr [:blank:] _ | tr : _ | tr / _ | tr "\134" _`;
# we should now have a sanitized ${TITLE} to use with less danger of
# screwing things up should we print from a browser or some such....

# get file to which the job is "printed" from device URI, so
# so that you can use this backend multiple times, for various
# "sdpost" printers...
#!TARGETFILE=${DEVICE_URI#sdpost:}

### uncomment&modify the following line if you need the JOBTITLE,
### USERNAME, JOBID, DATE as part of the filename...
#! TARGETFILE=${USER}-${JOBID}-${DEVICE_URI#sdpost:}-${TITLE}
#!TARGETFILE=${USER}-${JOBID}-${TITLE}
TARGETFILE=${TITLE}
# but check "accepting" status first...
GREPSTRING="not accepting" ;
if lpstat -a astrorepo | grep "$GREPSTRING" &> /dev/null ; then
echo "ERROR: printer $TARGETFILE not accepting jobs..."
exit 1
fi

mkdir -p ${rootDir}
chmod +rwX ${rootDir}

if file --brief $FILE | grep "FITS image data"; then
    destdir=${rootDir}/fits/${USER}/${JOBID}
else
    destdir=${rootDir}/other/${USER}/${JOBID}/${CONTENT_TYPE}
fi

# now do the job....
echo "Copying to: "  ${destdir}/${TARGETFILE}  >> ${LOG}
mkdir -p $destdir
cat $FILE > ${destdir}/${TARGETFILE}

 
 
# we reach this line only if we actually "printed something"
echo 1>&2
echo "NOTICE: processed Job ${JOBID} to file ${destdir}/${TARGETFILE}" 1>&2
echo "NOTICE: End of \"${0}\" run...."                                 1>&2
echo "NOTICE: -------------------------------------------------------" 1>&2
echo 1>&2
exit 0
