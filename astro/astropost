#!/bin/bash
# Have debug info in /var/log/cups/error_log:
#! set -x
# This CUPS backend allows you to "print to file".
# see also:
#   http://www.linuxcommand.org/man_pages/backend1.html
#   http://localhost:631/help/   (on machine that has cups installed)

# It saves the file into a "cache" and posts the file to a "transfer
# queue" for copying to another machine.
#
# Modified from:
#   http://osdir.com/ml/printing.cups.devel/2004-10/msg00007.html
# which contained snip (c) Kurt Pfeifle, Danka Deutschland GmbH
# See also: https://community.kde.org/Printing/Developer_Tools
#
# Install a printer like this:
#   chmod a+x astropost  # this file
#   sudo cp astropost /usr/lib/cups/backend/astropost
#   sudo service cups restart
#   sudo lpadmin -p astro -v astropost:/tmp/mountain_cache -E
# There are restrictions on what directory can be written to.
# This script runs as "lp" user.
#
# Then you can do things like:
#   lpstat -a  # should see the printer is "accepting requests"
#   lpr -P astro mandlelbrot.jpg
#
# If you print to the "astro" printer, you will find the files from
# CUPS filtering produced in "/tmp/astro/*".
#
#
# Destination Directory structure:
#    /mtncache/
#      fits/<USER>/<JOBID>/<datafile>
#      other/<USER>/<JOBID>/<MIME-TYPE>/<MIME-SUBTYPE>/<datafile>
#
# Rejected moving files directly into old iDCI structure because would require
# reading FITS header and wouldn't apply to other kinds of
# files. Instead, we will allow all files to be moved to Valley and
# straighten it up there. 
#
# The old iDCI structure was:
#  /mtncache/
#      fits/<DATE>/<TELESCOPE>/<PROPID>/<datafile>
# Example absolute path for above structure:
#   /mtncache/20140921/kp4m/2014B-0461/k4k_140921_235746_zri.fits.fz
#

error() {
    local logfile="$1"
    local parent_lineno="$2"
    local message="$3"
    local code="${4:-1}"
    echo "Did not complete! Error near line ${parent_lineno}." >> ${logfile}

    if [[ -n "$message" ]] ; then
        echo "${message}; exiting with status ${code}" >> ${logfile}
    else
        echo "Exiting with status ${code}" >> ${logfile}
    fi
    exit "${code}"
}

export LOG=/tmp/astropost.log #!!!
trap 'error ${LOG} ${LINENO}' ERR
#!trap "echo \"$0 completed successfully\" >> ${LOG}" EXIT

JOBID=$1 ;
USER=$2 ;
TITLE=$3 ;
COPIES=$4 ;
OPTIONS=$5 ;
FILE=$6 || FILE="-"; # test for 5 or 6 parameters

PID=$$ ;
echo "~~~~~~~~~~~~~~~~~~~~~" >> ${LOG}
echo "JOBID   = " ${JOBID}   >> ${LOG}
echo "USER    = " ${USER}    >> ${LOG}
echo "TITLE   = " ${TITLE}   >> ${LOG}
echo "COPIES  = " ${COPIES}  >> ${LOG} 
echo "OPTIONS = " ${OPTIONS} >> ${LOG} 
echo "FILE    = " ${FILE}    >> ${LOG} 
echo "CONTENT_TYPE = " ${CONTENT_TYPE} >> ${LOG} 
echo "DEVICE_URI   = "  ${DEVICE_URI} >> ${LOG}
rootDir="${DEVICE_URI#astropost:}"
echo "rootDir  = " ${rootDir}         >> ${LOG}
echo "TMPDIR   = " ${TMPDIR}          >> ${LOG}
#! echo "FILETYPE = " `file $FILE`        >> ${LOG}

# if there are no arguments: print the "I'm here" message for cupsd's probing
if [ $# -eq 0 ]; then
echo "direct astropost \"Unknown\" \"Print any job to file specified in device-URI\""
exit 0
fi

# in case of wrong number of arguments: print usage hint
if [ $# -ne 5 -a $# -ne 6 ]; then
echo ""
echo "Usage: astropost job-id user title copies options [file]"
echo " example for device-URI: 'astropost:/path/to/targetfile'"
echo "(this writes the printfile to disk at specified path)"
echo ""
echo "Install a printqueue with:\n \
'lpadmin -p <astropost-printer-name> -v astropost:/</path/to/targetfile> -E'"
echo ""
exit 1
fi

# sanitize $TITLE -- remove any spaces, colons and slashes or
# backslashes from filename
TITLE=`echo ${TITLE} | tr [:blank:] _ | tr : _ | tr / _ | tr "\134" _`;
# we should now have a sanitized ${TITLE} to use with less danger of
# screwing things up should we print from a browser or some such....

# get file to which the job is "printed" from device URI, so
# so that you can use this backend multiple times, for various
# "astropost" printers...
#! TARGETFILE=${DEVICE_URI#astropost:}
#! TARGETFILE=${USER}-${JOBID}-${DEVICE_URI#astropost:}-${TITLE}
#! TARGETFILE=${USER}-${JOBID}-${TITLE}
TARGETFILE=${TITLE}

# but check "accepting" status first...
GREPSTRING="not accepting" ;
if lpstat -a astro | grep "$GREPSTRING" &> /dev/null ; then
    echo "ERROR: printer $TARGETFILE not accepting jobs..."
    exit 1
fi

mkdir -p ${rootDir}
chmod +rwX ${rootDir}

################################################################################
### +++ Retained in case someone wants to disable transfer of non-fits files.
################################################################################
#!  if file --brief $FILE | grep "FITS image data"; then
#!      destdir=${rootDir}/fits/${USER}/${JOBID}
#!  else
#!      destdir=${rootDir}/other/${USER}/${JOBID}/${CONTENT_TYPE}
#!  fi
destdir=${rootDir}/${USER}/${JOBID}

# now do the job....
mkdir -p $destdir
chmod -R a+rwX ${rootDir}
fullfname="${destdir}/${TARGETFILE}"
echo "Copying to: "  ${fullfname}  >> ${LOG}
cat $FILE > ${fullfname}             # Add posted file to CACHE
chmod a+rw ${fullfname}
echo "${OPTIONS}" > "${fullfname}.options"
chmod a+rw "${fullfname}.options"

echo "DEBUG2: posting file: ${fullfname}" 1>&2
echo "id: " `id` >> ${LOG}
ls -l $0 >> ${LOG} 2>&1 
ls -l `type -p md5sum` >> ${LOG}

echo "Calculate checksum" >> ${LOG}
md5sum ${fullfname} >>  ${LOG} 

echo "Trying script: /usr/lib/cups/lib/astro/pushfile.sh" >> ${LOG}
/usr/lib/cups/lib/astro/pushfile.sh ${fullfname} >> ${LOG} 2>&1 

#!echo "Pushing ${fullfname} to Transfer Queue" >> ${LOG}
#!source /home/pothiers/PYTHON_ENV/data-queue/bin/activate >> ${LOG} 2>&1 
#!#!ls -l `type -p dqcli` >> ${LOG} 2>&1 
#!#!dqcli --help >> ${LOG}
#!#!
#!md5sum ${fullfname} | dqcli --post - >> ${LOG} 2>&1
#!echo "Pushed" >> ${LOG}


# we reach this line only if we actually "printed something"
echo "Done" >> ${LOG}
echo 1>&2
echo "NOTICE: processed Job ${JOBID} to file ${destdir}/${TARGETFILE}" 1>&2
echo "NOTICE: End of \"${0}\" run...."                                 1>&2
echo "NOTICE: -------------------------------------------------------" 1>&2
echo 1>&2
exit 0
